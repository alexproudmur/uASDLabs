What is Lorem Ipsum?
Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.

Why do we use it?
It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).


Where does it come from?
Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of "de Finibus Bonorum et Malorum" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.

The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from "de Finibus Bonorum et Malorum" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.

Where can I get some?
There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.

5
	paragraphs
	words
	bytes
	lists
	Start with 'Lorem
ipsum dolor sit amet...'

Translations: Can you help translate this site into a foreign language ? Please email us with details if you can help.
There are now a set of mock banners available here in three colours and in a range of standard banner sizes:
BannersBannersBanners
Donate: If you use this site regularly and would like to help keep the site on the Internet, please consider donating a small sum to help pay for the hosting and bandwidth bill. There is no minimum donation, any sum is appreciated - click here to donate using PayPal. Thank you for your support.
Donate Bitcoin: 16UQLq1HZ3CNwhvgrarV6pMoA2CDjb4tyF
NodeJS Python Interface GTK Lipsum Rails .NET Groovy
The standard Lorem Ipsum passage, used since the 1500s
"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."

Section 1.10.32 of "de Finibus Bonorum et Malorum", written by Cicero in 45 BC
"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?"

1914 translation by H. Rackham
"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?"

Section 1.10.33 of "de Finibus Bonorum et Malorum", written by Cicero in 45 BC
"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat."

1914 translation by H. Rackham
"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains."

Основні структури для опису графів:
матриця суміжності (заголовки строк та стовпців – номера вузлів, наявність зв'язку позначається 0,1(-1) або вага з відповідним знаком)
матриця інцидентності (строки – вузли, стовпці – ребра, 1 – ребро входить у вузол, -1 – виходить з вузла)
список суміжності;

 
список ребер (початок, кінець[, вага])
масив суміжності:

асоціативний масив суміжності (ключ – номера вершин)

Обход графа: поиск в глубину и поиск в ширину простыми словами на примере JavaScript [https://habr.com/ru/post/504374/] 
Обхід в ширину (Breadth first traversal або Breadth first Search) – рекурсивний алгоритм пошуку усіх вершин графу.




…
Висновки з джерела []:
«…
DFS двигается по граням туда и обратно, а BFS распространяется по соседям в поисках цели.
DFS использует стек, а BFS — очередь.
Время выполнения обоих составляет O(V + E), а пространственная сложность — O(V).
…»

Основні методи :
центрируваний, Inorder traversal (ліве піддерево, корінь, праве піддерево);




прямий, Preorder traversal (корінь, ліве потім праве піддерева);
зворотній, Postorder traversal (ліве, праве піддерева, потім корінь).

Типові задачі з алгоритмами на графах та їх використання [https://prog-cpp.ru/data-graph/]

«…
Применения алгоритма поиска в ширину
Поиск кратчайшего пути в невзвешенном графе (ориентированном или неориентированном).
Поиск компонент связности.
Нахождения решения какой-либо задачи (игры) с наименьшим числом ходов.
Найти все рёбра, лежащие на каком-либо кратчайшем пути между заданной парой вершин.
Найти все вершины, лежащие на каком-либо кратчайшем пути между заданной парой вершин.

Применения алгоритма поиска в глубину
Поиск любого пути в графе.
Поиск лексикографически первого пути в графе.
Проверка, является ли одна вершина дерева предком другой.
Поиск наименьшего общего предка.
Топологическая сортировка.
Поиск компонент связности.

…»

Завдання

Реалізувати відповідні структури даних для представлення ациклічних нерегулярних графів зі ступенем до 4 та тестовий граф (не менш ніж 20 вершин та 30 ребер), визначити показники продуктивності розроблених процедур з реалізації операцій.
Відповідно реалізувати операції:
додавання та видалення вершини;
додавання та видалення ребра;
отримання базових характеристик графу та визначеної вершини;
пошуку визначеної вершини;
обхід графу;
визначення найменшого предку двох визначених вершин;
пошук відстані між двома визначеними вершинами.

Мета роботи: дослідити ефективність розроблених структур даних та систематизувати отримані результати.

Робота передбачає розробку та реалізацію тестових наборів для дослідження ефективності структур даних, проведення експериментів зі збору даних, їх оформлення та опрацювання, обґрунтування висновків.
В ході роботи досліджуються та порівнюються між собою такі структури даних як – масив, список, бінарне дерево пошуку, збалансовані (червоно-чорне та АВЛ) дерева.
Для здійснення експериментів в однакових умовах, формуються 2 масиви однакового розміру – один для визначення середніх показників та інший для найгірших показників. Також формуються «комплекти» даних для дослідження операції пошуку (існуючих та не існуючих у масивах).
Для виконання завдання раціонально розробити програмне забезпечення, яке буде виконувати основні операції зі збору та реєстрації відповідних даних.

Завдання

Обґрунтувати методику формування масивів тестових даних та згенерувати масиви даних (для масиву відразу можна виконувати дослідження) ємністю 50 млн. елементів.
Дослідити та зафіксувати час виконання операцій:
вставка елементу
видалення елементу
пошук елементу за значенням
отримання відсортованої послідовності елементів.
Кожен з експериментів виконати тричі для кожної структури даних, дані зафіксувати та обрахувати середнє значення показника.
В ході експерименту для визначення показників та залежності, потрібно фіксувати час для елементів з індексами [1..9]*1000, [1..9]*10000, [1..9]*100000, [1..9]*1000000, [1..5]*10000000 (тобто, для 41 елементу).
За отриманими даними по середніх значеннях побудувати графіки.
За отриманими даними по середніх значеннях визначити їх відповідність до загальних теоретичних оцінок та пояснити отримані результати.
За отриманими даними по середніх значеннях визначити яка із розроблюваних структур є найбільш ефективною для виконання певної операції.
Скласти загальний звіт з роботи.

Для спрощення процесу обробки даних та побудови графіків раціонально скористатися електронними таблицями. Для більш зручного перенесення даних їх можна записувати у файл (*.csv, *.txt).
У структурі файлу окрема строка визначає кортеж даних, які розділені, як за правило символом «;» або « » (пробіл). При імпорті даних до електронної таблиці можна вказати який саме символ використано. Перша строка може вказувати на заголовки полів даних. Кількість полів (елементів) у кожній стрічці повинна бути однакова. Структура таблиці може бути, наприклад, така як наведена нижче.


Визначити склад, методи та інструменти для реалізації інтерфейсу та відповідного класу об'єктів, визначити алгоритми функціонування складових компонентів, реалізувати відповідне програмне забезпечення.
Окреме питання приділити методам реалізації хеш-функцій та розв'язання колізій.
Визначити які хеш-функції і чому можна вважати «гарними» для реалізації у поточній задачі, обґрунтувати використання обраного варіанту.
1. Реалізувати наступні методи для операцій:
вставки;
видалення елементу;
пошуку елементу за значенням (існуючого та не існуючого у структурі);
отримання впорядкованої послідовності елементів.
2. Для кожної операції визначити найкращий та найгірший (якщо є такі показники) час виконання (на великому наборі числових значень, не менш ніж 10 000) та пояснити отримані результати.
3. Визначити кількість пам’яті, яку займає структура даних.
4. Теоретично пояснити способи розв’язання колізій

Вказівки до виконання роботи

Обґрунтувати методи вибору даних для проведення тестувань розробленої структури даних.
У звіті навести та пояснити:
реалізацію базових елементів структури та алгоритмів, що лежать у основі методів класу;
отримані значення для часу виконання операцій;
оцінку обсягу пам'яті для розроблених структур;
порівняти отримані характеристики з теоретичними оцінками та пояснити результати.
Для оцінки часу виконання операцій використати методи, наведені у першій лабораторній роботі.

Визначити склад, методи та інструменти для реалізації інтерфейсу та відповідного класу об'єктів, визначити алгоритми функціонування складових компонентів, реалізувати відповідне програмне забезпечення.
1. Реалізувати наступні методи для операцій:
вставки;
видалення елементу;
пошуку елементу за значенням (існуючого та не існуючого у структурі);
отримання впорядкованої послідовності елементів.
2. Для кожної операції визначити найкращий та найгірший час виконання (на великому наборі числових значень, більше 10000) та пояснити отримані результати.
3. Визначити кількість пам’яті, яку займає структура даних.


Вказівки до виконання роботи

Обґрунтувати методи вибору даних для проведення тестувань розробленої структури даних.
У звіті навести та пояснити:
реалізацію базових елементів структури та алгоритмів, що лежать у основі методів класу;
отримані значення для часу виконання операцій;
оцінку обсягу пам'яті для розроблених структур;
порівняти отримані характеристики з теоретичними оцінками та пояснити результати.
Для оцінки часу виконання операцій використати методи, наведені у першій лабораторній роботі.

Лабораторна робота охоплює вивчення, та порівняння наступних структур даних:
Однобічно зв'язаний список
Двобічно зв'язаний список
Масиви (аналог ArrayList, std::vector)
Робота передбачує самостійну реалізацію відповідних структур даних, а не дослідження структур із стандартних бібліотек мови програмування.
Короткі теоретичні відомості про списки
Зв'язаний список — одна з найважливіших структур даних, в якій елементи лінійно впорядковані, але порядок визначається не номерами елементів, а вказівниками, які входять в склад елементів списку та вказують на наступний за даним елемент (в однозв’язних або однобічно зв'язаних списках) або на наступний та попередній елементи (в двозв'язних або двобічно зв'язаних списках). Список має «голову» — перший елемент та «хвіст» — решта елементів.
Зв'язані списки мають серію переваг порівняно з масивами. Зокрема, в них набагато ефективніше (за час О(1), тобто незалежно від кількості елементів) виконуються процедури додавання та вилучення елементів. Натомість, масиви набагато кращі в операціях, які потребують безпосереднього доступу до кожного елементу, що у випадку зі зв'язаними списками неможливо та потребує послідовного перебору усіх елементів, які передують даному.
Однобічно зв'язані списки

В однобічно зв'язаному списку, який є найпростішим різновидом зв'язаних списків, кожний елемент складається з двох полів: data або даних, та вказівника next на наступний елемент. Якщо вказівник не вказує на інший елемент (інакше: next = NULL), то вважається, що даний елемент — останній в списку.
Двобічно зв'язаний список

В двобічно зв'язаному списку елемент складається з трьох полів — вказівника на попередній елемент prev, поля даних data та вказівника next на наступний елемент. Якщо prev=NULL, то в елемента немає попередника (тобто він є «головою» списку), якщо next=NULL, то в нього немає наступника («хвіст» списку).
Кільцевий список
В кільцевому списку перший та останній елемент зв'язані. Тобто, поле prev голови списку вказує на хвіст списку, а поле next хвоста списку вказує на голову списку.
Завдання
1. Для кожної структури даних реалізувати наступні методи взаємодії:

gdgsdg
sdg
dsg
sd
gs
dg
sdg
s
d
sgdsdg
sd
gs
gd
gsd
g
sdg
s

sd
gs
dg
sd
g
sdg
sd

sd
sd
g
sd
g
sd
g
sd

ds
g
sd
g
sdg
s
d
g
sgd
g
sd
0000 0000 00 000 000 1 1 2 555 4565 
dgsdllsgsdlglsd